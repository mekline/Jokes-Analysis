filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#same thing again, just to report differences from fixation
library(dplyr)
library(tidyr)
myResults = read.csv("sig change files/LangfROIsrespNonlitJokes.csv") #this reads from
myName = "LangfROIsrespNonlitJokes"
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Lang (L or R)
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3,7))
myTests$ROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb', 'average over ROIs');
myResults = read.csv("sig change files/LangfROIsrespNonlitJokes.csv") #this reads from
myName = "LangfROIsrespNonlitJokes"
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Some optional monkey business for adding ROInames
#Lang (L or R)
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3))
myTests$ROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Some optional monkey business for adding ROInames
#Lang (L or R)
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3))
myTests$ROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb', 'LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
library(dplyr)
library(tidyr)
myResults = read.csv("sig change files/LangfROIsrespNonlitJokes.csv") #this reads from
myName = "LangfROIsrespNonlitJokes"
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Some optional monkey business for adding ROInames
#Lang (L or R)
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3, 12,10,11,8,7,9))
myTests$ROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb', 'LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
View(myTests)
toPrint = myTests
#same thing again, just to report differences from fixation
library(dplyr)
library(tidyr)
myResults = read.csv("sig change files/MDfROIsrespNonlitJokes.csv") #this reads from
myName = "MDfROIsrespNonlitJokes"
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myTests$ROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC','LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
toPrint = rbind(toPrint, myTests)
myResults = read.csv("sig change files/NewToMfROIsrespNonlitJokes.csv") #this reads from
myName = "NewToMfROIsrespNonlitJokes"
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#ToM
myTests$ROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS','DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
toPrint = rbind(toPrint, myTests)
myResults = read.csv("sig change files/RHLangfROIsrespNonlitJokes.csv") #this reads from
myName = "RHLangfROIsrespNonlitJokes"
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myTests$ROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb','RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
myResults = read.csv("sig change files/RHLangfROIsrespNonlitJokes.csv") #this reads from
myName = "RHLangfROIsrespNonlitJokes"
#Get results to Jokes>fix and Non>fix
Jokes <- myResults %>%
filter(Contrast == 1)
Nonjokes <- myResults %>%
filter(Contrast == 2)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI and each contrast, conduct a significance test.
myContrast = "Jokes"
for (fr in 1:length(unique(Jokes$ROI))){
thisROI = unique(Jokes$ROI)[fr]
theseResults <- Jokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myContrast = "Nonjokes"
for (fr in 1:length(unique(Nonjokes$ROI))){
thisROI = unique(Nonjokes$ROI)[fr]
theseResults <- Nonjokes %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3, 12,10,11,8,7,9))
myTests$ROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb','RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
toPrint = rbind(toPrint, myTests)
View(toPrint)
zz = file('some_t_tests.csv', 'w')
write.csv(toPrint, zz, row.names=FALSE)
close(zz)
toPrint <- read.csv(t_tests_all_against_fixation.csv)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Stats for the paper")
toPrint <- read.csv(t_tests_all_against_fixation.csv)
toPrint <- read.csv("t_tests_all_against_fixation.csv")
View(toPrint)
toPrint <- mutate(toPrint, p.Adjust = p.adjust(as.numeric(p), method = "fdr"))
library(dplyr)
library(tidyr)
toPrint <- mutate(toPrint, p.Adjust = p.adjust(as.numeric(p), method = "fdr"))
View(toPrint)
zz = file('some_t_tests.csv', 'w')
write.csv(toPrint, zz, row.names=FALSE)
close(zz)
####
#Stuff to change!
myResultsFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Toolbox results - supplemental/LangfROIsrespLangLoc_20160124_results'
myOutputFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/'
myFilename = 'LangfROIsrespLangLoc_20160124.csv'
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
####
#Stuff to change!
myResultsFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Toolbox results - supplemental/NewToMfROIsrespToMLoc_20160310_results'
myOutputFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/'
myFilename = 'NewToMfROIsrespToMLoc_20160310.csv'
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
####
#Stuff to change!
myResultsFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Toolbox results - supplemental/RHLangfROIsrespLangLoc_20160124_results'
myOutputFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/'
myFilename = 'RHLangfROIsrespLangLoc_20160124.csv'
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Stats for the paper")
#This paper recalculates T tests based on %-signal-change, per-participant, per-parcel, per-contrast,
#just so I can see more clearly what's going on. Those %-signal-change calculations are
#produced by the awesome toolbox analyses, and represent a single overall calculation
#derived for the whole region (not individual voxels, as mk sometimes forgets)
#
library(dplyr)
library(tidyr)
myResults = read.csv("sig change files/LangfROIsrespLangLoc.csv") #this reads from
myName = "LangfROIsrespLangLoc"
myContrast = "sentences > nonwords"
#For everything except ToMCustom, we only care about contrast 3, "Joke-Lit"
myResults <- myResults %>%
filter(Contrast == 3)
##
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI, conduct a significance test.
for (fr in 1:length(unique(myResults$ROI))){
thisROI = unique(myResults$ROI)[fr]
theseResults <- myResults %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Lang
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3,7))
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3))
myTests$ROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
toPrint = myTests
myResults = read.csv("sig change files/RHLangfROIsrespLangLoc.csv") #this reads from
myName = "RHLangfROIsrespLangLoc"
myContrast = "sentences > nonwords"
#For everything except ToMCustom, we only care about contrast 3, "Joke-Lit"
myResults <- myResults %>%
filter(Contrast == 3)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI, conduct a significance test.
for (fr in 1:length(unique(myResults$ROI))){
thisROI = unique(myResults$ROI)[fr]
theseResults <- myResults %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Average signal changes for each person, then do another test!
#myAvgResults <- myResults %>%
#  group_by(SubjectNumber)%>%
#  summarise(avSigChange = mean(sigChange))
#myt <- t.test(myAvgResults$avSigChange, mu=0, alt='greater')
#myTests[nrow(myTests)+1,] <- c(myName, myContrast, 'average over ROIs', myt$statistic, myt$p.value )
#Some optional monkey business for adding ROInames
#Lang
myTests <-arrange(myTests, ROI=c(6,4,5,2,1,3))
myTests$ROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
#For putting together the whole set!
toPrint = rbind(toPrint, myTests)
myResults = read.csv("sig change files/NewToMfROIsrespToMLoc.csv") #this reads from
myName = "NewToMfROIsrespToMLoc"
myContrast = "bel > pho"
#For everything except ToMCustom, we only care about contrast 3, "Joke-Lit"
myResults <- myResults %>%
filter(Contrast == 3)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI, conduct a significance test.
for (fr in 1:length(unique(myResults$ROI))){
thisROI = unique(myResults$ROI)[fr]
theseResults <- myResults %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Average signal changes for each person, then do another test!
#myAvgResults <- myResults %>%
#  group_by(SubjectNumber)%>%
#  summarise(avSigChange = mean(sigChange))
#myt <- t.test(myAvgResults$avSigChange, mu=0, alt='greater')
#myTests[nrow(myTests)+1,] <- c(myName, myContrast, 'average over ROIs', myt$statistic, myt$p.value )
#Some optional monkey business for adding ROInames
myTests$ROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS','average over ROIs');
#For putting together the whole set!
toPrint = rbind(toPrint, myTests)
library(dplyr)
library(tidyr)
myResults = read.csv("sig change files/NewToMfROIsrespToMLoc.csv") #this reads from
myName = "NewToMfROIsrespToMLoc"
myContrast = "bel > pho"
#For everything except ToMCustom, we only care about contrast 3, "Joke-Lit"
myResults <- myResults %>%
filter(Contrast == 3)
##### BELOW SHOULDN"T NEED CHANGES
myTests = data.frame(System= character(0), Contrast= character(0), ROI = integer(0), t=numeric(0), p=numeric(0), stringsAsFactors = FALSE)
#For each ROI, conduct a significance test.
for (fr in 1:length(unique(myResults$ROI))){
thisROI = unique(myResults$ROI)[fr]
theseResults <- myResults %>%
filter(ROI == thisROI)
myt <- t.test(theseResults$sigChange, mu=0, alt='greater')
myTests[nrow(myTests)+1,] <- c(myName, myContrast, thisROI, myt$statistic, myt$p.value )
}
#Average signal changes for each person, then do another test!
#myAvgResults <- myResults %>%
#  group_by(SubjectNumber)%>%
#  summarise(avSigChange = mean(sigChange))
#myt <- t.test(myAvgResults$avSigChange, mu=0, alt='greater')
#myTests[nrow(myTests)+1,] <- c(myName, myContrast, 'average over ROIs', myt$statistic, myt$p.value )
myTests$ROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
#For putting together the whole set!
toPrint = rbind(toPrint, myTests)
#Do some corrections on that whole set of tests!!!! (Note, for correctness do this without average values...)
toPrint <- mutate(toPrint, p.Adjust = p.adjust(as.numeric(p), method = "fdr"))
zz = file('some_t_tests.csv', 'w')
write.csv(toPrint, zz, row.names=FALSE)
close(zz)
