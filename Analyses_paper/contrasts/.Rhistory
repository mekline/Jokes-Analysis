close(zz)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
revlang.contrasts = c('sent','non','non-sent')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other','paramfun')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
myResults = read.csv('MDfROIsrespRevLangLoc.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'MDall-toLang')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM with paramfun #10/07 new thing for supp. materials
myResults = read.csv('NewToMfROIsrespNonlitJokesCustom_20161007.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#View(allSigChange)
#New 10/12: Localizer analysis shows that VMPFC localizer doesn't come out in this dataset, so remove it from
#the joke-lit tests for ToM and ToM custom (but leave it for the localizer itself)
allSigChange = allSigChange %>%
filter(!(Group == 'ToM' & ROIName =='VMPFC')) %>%
filter(!(Group == 'ToMCustom' & ROIName =='VMPFC'))
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, ROI, Contrast, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, Contrast)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
#View(allTests)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
########
# Report those T tests like we want for the paper
########
#Do corrections ever matter?
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(filter(allTests,mismatch))
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
###
#RESP LOCALIZER
#allTests %>%
#  filter(Group == 'RHLang-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), reportTests(t,p)) #found a surprise nonsig!
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang-toLang', contrastName == 'sent-non', !sig)
#summarise(n(), sum(sig), reportTests(t,p))
filter(Group == 'MDRight-toLang', contrastName == 'non-sent', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight-toLang', contrastName == 'non-sent', !sig)
allTests %>%
filter(Group == 'MDLeft-toLang', contrastName == 'non-sent', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDLeft-toLang', contrastName == 'non-sent', !sig)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
revlang.contrasts = c('sent','non','non-sent')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other','paramfun')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
myResults = read.csv('MDfROIsrespRevLangLoc.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'MDall-toLang')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM with paramfun #10/07 new thing for supp. materials
myResults = read.csv('NewToMfROIsrespNonlitJokesCustom_20161007.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#View(allSigChange)
#New 10/12: Localizer analysis shows that VMPFC localizer doesn't come out in this dataset, so remove it from
#the joke-lit tests for ToM and ToM custom (but leave it for the localizer itself)
allSigChange = allSigChange %>%
filter(!(Group == 'ToM' & ROIName =='VMPFC')) %>%
filter(!(Group == 'ToMCustom' & ROIName =='VMPFC'))
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, ROI, Contrast, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, Contrast)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
#View(allTests)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
########
# Report those T tests like we want for the paper
########
#Do corrections ever matter?
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(filter(allTests,mismatch))
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
###
#RESP LOCALIZER
allTests %>%
filter(Group == 'LHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Convention: when all significant, report the largest p
#allTests %>%
#  filter(Group == 'RHLang-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), reportTests(t,p)) #found a surprise nonsig!
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang-toLang', contrastName == 'sent-non', !sig)
###MD localizer check
allTests %>%
#filter(Group == 'MDRight-toLang', contrastName == 'non-sent') %>%
#summarise(n(), sum(sig), reportTests(t,p))
filter(Group == 'MDRight-toLang', contrastName == 'non-sent', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight-toLang', contrastName == 'non-sent', !sig)
allTests %>%
filter(Group == 'ToM-toToM', contrastName == 'bel-pho', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM-toToM', contrastName == 'bel-pho', !sig)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
revlang.contrasts = c('sent','non','non-sent')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other','paramfun')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
myResults = read.csv('MDfROIsrespRevLangLoc.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'MDall-toLang')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM with paramfun #10/07 new thing for supp. materials
myResults = read.csv('NewToMfROIsrespNonlitJokesCustom_20161007.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#View(allSigChange)
#New 10/12: Localizer analysis shows that VMPFC localizer doesn't come out in this dataset, so remove it from
#the joke-lit tests for ToM and ToM custom (but leave it for the localizer itself)
allSigChange = allSigChange %>%
filter(!(Group == 'ToM' & ROIName =='VMPFC')) %>%
filter(!(Group == 'ToMCustom' & ROIName =='VMPFC'))
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, ROI, Contrast, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, Contrast)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
allSigChange
head(allSigChange)
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit')
head(forPower)
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') )
head(forPower)
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower
help(power)
t = t.test(allSigChange$sigChange, mu=0,alt='greater')
t
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)
nrow(forPower)
48/12
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower
forPower$n <- 12
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(eff = mean(sigChange),t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower
mapply(pwr.t.test, n=forPower$n, d=forPower$eff, sig.level=0.05)
library(pwr)
mapply(pwr.t.test, n=forPower$n, d=forPower$eff, sig.level=0.05)
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(eff = mean(sigChange),t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower$n <- 12
forPower$n
forPower$eff
mapply(pwr.t.test, forPower$n, forPower$eff, 0.05)
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))        ## mean difference (numerator)
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)                     ## common sd computation
cd  <- md/csd                        ## cohen's d
}
x <- rnorm(1,100)
x
x <- rnorm(1,100,34)
x
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(m = mean(sigChange), sd = sd(sigChange), t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower
forPower$cohens_d <- forPower$m %. forPower$m
forPower$cohens_d <- forPower$m / forPower$m
forPower
forPower$cohens_d <- forPower$m / forPower$sd
forPower
mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05)
forPower$n
forPower$n <- 12
forPower$n <- 12
forPower$cohens_d <- forPower$m / forPower$sd
mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05)
mapply(pwr.t.test$power, n=forPower$n, d=forPower$cohens_d, sig.level=0.05)
mapply(pwr.t.test.power, n=forPower$n, d=forPower$cohens_d, sig.level=0.05)
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05)
ptests
ptests$power
ptests[1]$power
ptests[1,]$power
ptests{1}$power
ptests(1)$power
ptests[1,]$power
ptests[,1]$power
forPower
effect_est <- min(forPower$cohens_d)
effect_est
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05, alternative='greater')
ptests
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(m = mean(sigChange), sd = sd(sigChange), t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower$n <- 12
forPower$cohens_d <- forPower$m / forPower$sd
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05, alternative='greater')
#These effects are powered okay: range 0.587 - 0.856
#Assume the smallest effect in ToM regions are the true effect size
effect_est <- min(forPower$cohens_d)
effect_est
pwr.test(d=effect_est, sig.level=0.05, power = 0.8, alterantive='greater')
pwr.t.test(d=effect_est, sig.level=0.05, power = 0.8, alterantive='greater')
pwr.t.test(d=effect_est, sig.level=0.05, power = 0.8, alternative='greater')
#Assume the smallest effect in ToM regions are the true effect size
effect_est <- max(forPower$cohens_d)
#How many participants do we need for 80% power at p=0.05?
pwr.t.test(d=effect_est, sig.level=0.05, power = 0.8, alternative='greater')
forPower
ptests
forPower
