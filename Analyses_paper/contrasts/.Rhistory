#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here
#so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
# myResults = read.csv('MDfROIsrespLang.csv')%>%
#   mutate(ROIName = MDROI.Names[ROI]) %>%
#   mutate(contrastName = lang.contrasts[Contrast])%>%
#   mutate(Group = 'MDall-toLang')
# allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM
myResults = read.csv('NewToMfROIsresCustomJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#View(allSigChange)
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, ROI, Contrast, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, Contrast)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
#View(allTests)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
########
# Report those T tests like we want for the paper
########
#Do corrections ever matter?
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(filter(allTests,mismatch))
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
###
#RESP LOCALIZER
allTests %>%
filter(Group == 'LHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Convention: when all significant, report the largest p
#allTests %>%
#  filter(Group == 'RHLang-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), reportTests(t,p)) #found a surprise nonsig!
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang-toLang', contrastName == 'sent-non', !sig)
###TO ADD! MD localizer check
#allTests %>%
#  filter(Group == 'MDRight-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), reportTests(t,p))
#allTests %>%
#  filter(Group == 'MDLeft-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'ToM-toToM', contrastName == 'bel-pho', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM-toToM', contrastName == 'bel-pho', !sig)
###
#RESP JOKES
### RHLang
#Jokes and Nonjokes both activate, but no differences.
allTests %>%
filter(Group == 'RHLang', contrastName == 'joke', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang', contrastName == 'joke', !sig)
allTests %>%
filter(Group == 'RHLang', contrastName == 'lit', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang', contrastName == 'lit', !sig)
allTests %>%
filter(Group == 'RHLang', contrastName == 'joke-lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
### LHLang
#Jokes and Nonjokes both activate, but no differences.
allTests %>%
filter(Group == 'LHLang', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p)) #ONLY ONE of the ROIs significant
filter(allTests, Group == 'LHLang', contrastName == 'joke-lit', sig)
### RHMD
# RH is pretty boring
allTests %>%
filter(Group == 'MDRight', contrastName == 'joke', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'joke', !sig)
allTests %>%
filter(Group == 'MDRight', contrastName == 'lit',sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'lit', !sig)
allTests %>%
filter(Group == 'MDRight', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'joke-lit', sig)
allTests %>%
filter(Group == 'MDLeft', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDLeft', contrastName == 'joke-lit', sig)
allTests %>%
filter(Group == 'ToM', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM', contrastName == 'joke-lit', sig)
#This takes the individual-subject contrast values and runs some nifty lmer models.  First #many
#lines are reading in the contrasts as in localizer_t_tests, fun stuff starts on line 105
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(lme4)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
# myResults = read.csv('MDfROIsrespLang.csv')%>%
#   mutate(ROIName = MDROI.Names[ROI]) %>%
#   mutate(contrastName = lang.contrasts[Contrast])%>%
#   mutate(Group = 'MDall-toLang')
# allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM
myResults = read.csv('NewToMfROIsresCustomJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#########
# Linear mixed Models!
#Plan: Within each system (localizers, and jokes), test for basic localizer condition differences, then do some
#between-system comparisons
RHLangtoLang <- filter(allSigChange, Group == "RHLang-toLang", contrastName == 'sent' | contrastName == 'non')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
anova(m1,m0)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", contrastName == 'sent' | contrastName == 'non')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLangtoLang)
anova(m1,m0)
##TO ADD: RMD and LMD to Lang Localizer check (sent < non)
# MDRtoMDR <- filter(allSigChange, Group == "MDLeft-toLang", contrastName == 'sent' | contrastName == 'non')
# m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRtoMDR)
# m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRtoMDR)
# anova(m1,m0)
#
# MDLtoMDL <- filter(allSigChange, Group == "MDRight-toLang", contrastName == 'sent' | contrastName == 'non')
# m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLtoMDL)
# m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLtoMDL)
# anova(m1,m0)
ToMtoToM <- filter(allSigChange, Group == "ToM-toToM", contrastName == 'bel' | contrastName == 'pho')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMtoToM)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMtoToM)
anova(m1,m0)
#To jokes!
RHLang <- filter(allSigChange, Group == "RHLang", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
anova(m1,m0)
LHLang <- filter(allSigChange, Group == "LHLang", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLang)
anova(m1,m0)
MDRight <- filter(allSigChange, Group == "MDRight", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRight)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRight)
anova(m1,m0)
MDLeft <- filter(allSigChange, Group == "MDLeft", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLeft)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLeft)
anova(m1,m0)
ToM <- filter(allSigChange, Group == "ToM", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToM)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToM)
anova(m1,m0)
#Finally, remodel ToM activations with funniness ratings
ToMCustom <- filter(allSigChange, Group == "ToMCustom", contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
ToMCustom$contrastName <- as.factor(ToMCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMCustom)
anova(m1,m0)
#Relating behavioral and contrast data by subjects!
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(lme4)
library(ggplot2)
#(set your own wd first)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
mywd <- getwd()
setwd("indsubjs_behavioral_data")
myfi <- list.files(pattern='*data\\.csv')
mydata <- data.frame(NULL)
for(f in myfi) {
tmp <- read.csv(f, header=T)
tmp$filename <- f
mydata <- rbind(mydata, tmp)
}
#Subjs 6 onward have oddly formatted TR info at the top of files, remove it
mydata <- mydata[grep("KAN",mydata$subj),]
#Drop nonresponding trials
mydata$RT <- as.numeric(as.character(mydata$RT))
mydata <- mydata[!is.na(mydata$RT),]
#Relable subject data from filenames!
mydata <- mydata %>%
mutate(newSubjectName = substr(filename,1,15))
####
# Ratings
####
#Get average ratings per category per participant
mydata$response <- as.numeric(as.character(mydata$response))
avgResponse <- mydata %>%
group_by(newSubjectName, category) %>%
summarise(meanResponse = mean(response))
####
# Now go to the contrast files and get the jokes-lit average activation per subj.
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
myfMRIResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM') %>%
filter(contrastName == 'joke-lit') %>%
group_by(SubjectNumber)%>%
summarize(meanSigChange = mean(sigChange))
myRatingResults <- mydata %>%
mutate(SubjectNumber = as.numeric(as.factor(newSubjectName))) %>%
group_by(SubjectNumber, newSubjectName, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
#Merge the datasets!
bb <- merge(myRatingResults, myfMRIResults)
## REPORT STATS
cor(bb$meanResponseChange, bb$meanSigChange)
## MAKE PRETTY GRAPH
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses/figs")
coef(lm(meanResponseChange ~ meanSigChange, data = bb))
ggplot(data=bb, aes(y=meanSigChange, x=meanResponseChange)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(limits = c(-0.25, 0.50), breaks = seq(-0.25, 0.50, 0.25)) +
scale_x_continuous(limits = c(0, 2), breaks = seq(0, 2, 0.5)) +
xlab('average response (joke - lit)') +
ylab('average activation (joke - lit)') +
theme_bw() +
ggsave(filename="behav_activation.jpg", width=3, height=3)
#This takes the individual-subject contrast values and runs some nifty lmer models.  First #many
#lines are reading in the contrasts as in localizer_t_tests, fun stuff starts on line 105
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(lme4)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
# myResults = read.csv('MDfROIsrespLang.csv')%>%
#   mutate(ROIName = MDROI.Names[ROI]) %>%
#   mutate(contrastName = lang.contrasts[Contrast])%>%
#   mutate(Group = 'MDall-toLang')
# allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM
myResults = read.csv('NewToMfROIsresCustomJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#########
# Linear mixed Models!
#Plan: Within each system (localizers, and jokes), test for basic localizer condition differences, then do some
#between-system comparisons
RHLangtoLang <- filter(allSigChange, Group == "RHLang-toLang", contrastName == 'sent' | contrastName == 'non')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
anova(m1,m0)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", contrastName == 'sent' | contrastName == 'non')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLangtoLang)
anova(m1,m0)
##TO ADD: RMD and LMD to Lang Localizer check (sent < non)
# MDRtoMDR <- filter(allSigChange, Group == "MDLeft-toLang", contrastName == 'sent' | contrastName == 'non')
# m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRtoMDR)
# m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRtoMDR)
# anova(m1,m0)
#
# MDLtoMDL <- filter(allSigChange, Group == "MDRight-toLang", contrastName == 'sent' | contrastName == 'non')
# m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLtoMDL)
# m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLtoMDL)
# anova(m1,m0)
ToMtoToM <- filter(allSigChange, Group == "ToM-toToM", contrastName == 'bel' | contrastName == 'pho')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMtoToM)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMtoToM)
anova(m1,m0)
#To jokes!
#hypothesis: large between-system differences eat most of the variance.  Use joke-lit contrast value instead
ToM_MDRight_cont <- filter(allSigChange, Group == "ToM" | Group == "MDRight", contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
anova(m1,m0)
ToM_RHLang_cont <- filter(allSigChange, Group == "ToM" | Group == "RHLang", contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_RHLang_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_RHLang_cont)
anova(m1,m0)
ToM_MDRight_cont <- filter(allSigChange, Group == "ToM" | Group == "MDRight", contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
anova(m1,m0)
