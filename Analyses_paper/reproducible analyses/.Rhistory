install.packages('updater')
install.package('installr')
install.packages("installr")
install.packages("installr")
libraries
library(ggplot2)
install.packages("ggplot2")
R.Version()
#Analyzing the behavioral results from the jokes paper!
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(lme4)
library(ggplot2)
library(bootstrap)
install.packages("tidy")
install.packages("tidyr")
install.packages("dplyr")
install.packages(c("lme4","ggplot2","bootstrap"))
install.packages(c("lme4", "ggplot2", "bootstrap"))
#(set your own wd first)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
mywd <- getwd()
setwd("indsubjs_behavioral_data")
myfi <- list.files(pattern='*data\\.csv')
mydata <- data.frame(NULL)
for(f in myfi) {
tmp <- read.csv(f, header=T)
tmp$filename <- f
mydata <- rbind(mydata, tmp)
}
#Subjs 6 onward have oddly formatted TR info at the top of files, remove it
mydata <- mydata[grep("KAN",mydata$subj),]
#Drop nonresponding trials
mydata$RT <- as.numeric(as.character(mydata$RT))
mydata <- mydata[!is.na(mydata$RT),]
#Relable subject data from filenames!
mydata <- mydata %>%
mutate(newSubjectName = substr(filename,1,15))
####
# RT
####
#Get average RTs per category per participant
avgRT <- mydata %>%
group_by(newSubjectName, category) %>%
summarise(meanRT = mean(RT))
#T test
t.test(meanRT ~ category, data=avgRT)
#Response times are not different by condition
install.packages("dplyr")
library(tidyr)
library(dplyr)
library(lme4)
library(ggplot2)
library(bootstrap)
#(set your own wd first)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
mywd <- getwd()
setwd("indsubjs_behavioral_data")
myfi <- list.files(pattern='*data\\.csv')
mydata <- data.frame(NULL)
for(f in myfi) {
tmp <- read.csv(f, header=T)
tmp$filename <- f
mydata <- rbind(mydata, tmp)
}
#Subjs 6 onward have oddly formatted TR info at the top of files, remove it
mydata <- mydata[grep("KAN",mydata$subj),]
#Drop nonresponding trials
mydata$RT <- as.numeric(as.character(mydata$RT))
mydata <- mydata[!is.na(mydata$RT),]
#Relable subject data from filenames!
mydata <- mydata %>%
mutate(newSubjectName = substr(filename,1,15))
####
# RT
####
#Get average RTs per category per participant
avgRT <- mydata %>%
group_by(newSubjectName, category) %>%
summarise(meanRT = mean(RT))
#T test
t.test(meanRT ~ category, data=avgRT)
####
# Ratings
####
#Get average ratings per category per participant
mydata$response <- as.numeric(as.character(mydata$response))
avgResponse <- mydata %>%
group_by(newSubjectName, category) %>%
summarise(meanResponse = mean(response))
t.test(meanResponse ~ category, data=avgResponse)
#Responses are different by condition! The jokes are funny!
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
avgRT <- ungroup(avgRT)
avgResponse <- ungroup(avgResponse)
#plot millisecnds
avgRT$meanRT <- avgRT$meanRT * 1000
#rename categories
avgRT$categoryLabel <- ""
avgRT[avgRT$category == "joke",]$categoryLabel <- "Jokes"
avgRT[avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
avgResponse$categoryLabel <- ""
avgResponse[avgResponse$category == "joke",]$categoryLabel <- "Jokes"
avgResponse[avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = avgRT %>%
group_by(categoryLabel)%>%
summarise(mean = mean(meanRT))
tobootUp = avgRT %>%
group_by(categoryLabel)%>%
summarise(bootup = bootup(meanRT))
tobootDown = avgRT %>%
group_by(categoryLabel)%>%
summarise(bootdown = bootdown(meanRT))
#toPlotRT = merge(toPlotRT, toStr)
#toPlotRT$se_up <- toPlotRT$mean + toPlotRT$sterr
#toPlotRT$se_down <- toPlotRT$mean - toPlotRT$sterr
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = avgResponse %>%
group_by(categoryLabel)%>%
summarise(mean = mean(meanResponse))
#toStr = avgResponse %>%
#  group_by(categoryLabel)%>%
#  summarise(sterrRes = sterr(meanResponse))
#toPlotResp = merge(toPlotResp, toStr)
#toPlotResp$se_up <- toPlotResp$mean + toPlotResp$sterr
#toPlotResp$se_down <- toPlotResp$mean - toPlotResp$sterr
tobootUp = avgResponse %>%
group_by(categoryLabel)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = avgResponse %>%
group_by(categoryLabel)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(mywd)
ggplot(data=toPlotRT, aes(y=mean, x=categoryLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1200)) +
scale_y_continuous(breaks = seq(0, 1200, 200))+
xlab('Stimulus type') +
ylab('Response time (milliseconds)') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
# Optional, remove for RHLang and ToMCustom since we want the legend there...
theme(legend.position="none")
ggplot(data=toPlotResp, aes(y=mean, x=categoryLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(1,4)) +
scale_y_continuous(breaks = seq(1, 4, 1))+
xlab('Stimulus type') +
ylab('Average funny-ness rating') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
# Optional, remove for RHLang and ToMCustom since we want the legend there...
theme(legend.position="none")
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(pwr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
revlang.contrasts = c('sent','non','non-sent')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other','paramfun')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('RevLangfROIsrespMD_20171220.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'RevLang-toMD')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'RevLang-toMD') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
allSigChange[(allSigChange$Group == 'RevLang-toMD') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
View(myResults)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(pwr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
revlang.contrasts = c('sent','non','non-sent')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other','paramfun')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
View(myResults)
myResults = read.csv('RevLangfROIsrespMD_20171220.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'RevLang-toMD')
View(myResults)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(pwr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
revlang.contrasts = c('sent','non','non-sent')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other','paramfun')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
myResults_orig = myResults
myResults = read.csv('RevLangfROIsrespMD_20171220.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'RevLang-toMD')
View(myResults)
View(myResults_orig)
names(myResults_orig)
myResults = read.csv('RevLangfROIsrespMD_20171220.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'RevLang-toMD') %>%
select(c("ROI", "ROI.size","average.localizer.mask.size",
"inter.subject.overlap","sigChange","SubjectNumber",
"Contrast", "ROIName", "contrastName","Group"))
allSigChange = rbind(allSigChange, myResults)
allSigChange[(allSigChange$Group == 'RevLang-toMD') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
allSigChange[(allSigChange$Group == 'RevLang-toMD') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('NewToMfROIsrespNonlitJokesCustom_20161007.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
allSigChange = allSigChange %>%
filter(!(Group == 'ToM' & ROIName =='VMPFC')) %>%
filter(!(Group == 'ToMCustom' & ROIName =='VMPFC'))
allTests <- allSigChange %>%
group_by(Group)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, ROI, Contrast, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, Contrast)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
#View(allTests)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(pwr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
revlang.contrasts = c('sent','non','non-sent')
md.contrasts = c('hard','easy','hard-easy')
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other','paramfun')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
#REMOVED old/wrong MD validator (MDfROIsrespRevLangLoc): we want Hard>Easy measured in regions localized
# by N>S (since most subj have only 1 MD run), *not the reverse*!
##TO ADD: MD to Lang localizer measure (Non should > Sent)
myResults = read.csv('RevLangfROIsrespMD_20171220.csv')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = revlang.contrasts[Contrast])%>%
mutate(Group = 'RevLang-toMD') %>%
select(c("ROI", "ROI.size","average.localizer.mask.size",
"inter.subject.overlap","sigChange","SubjectNumber",
"Contrast", "ROIName", "contrastName","Group"))
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'RevLang-toMD') & (allSigChange$ROI %%2 == 1),]$Group = 'RevLangLeft-toMD'
allSigChange[(allSigChange$Group == 'RevLang-toMD') & (allSigChange$ROI %%2 == 0),]$Group = 'RevLangRight-toMD'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM with paramfun #10/07 new thing for supp. materials
myResults = read.csv('NewToMfROIsrespNonlitJokesCustom_20161007.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#View(allSigChange)
#New 10/12: Localizer analysis shows that VMPFC localizer doesn't come out in this dataset, so remove it from
#the joke-lit tests for ToM and ToM custom (but leave it for the localizer itself)
allSigChange = allSigChange %>%
filter(!(Group == 'ToM' & ROIName =='VMPFC')) %>%
filter(!(Group == 'ToMCustom' & ROIName =='VMPFC'))
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, ROI, Contrast, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, Contrast)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
#View(allTests)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
#And save out allSigChange to be ported over to the main/E2 analyses
yy = file('AllSigChange_Exp1.csv', 'w')
write.csv(allSigChange, yy, row.names=FALSE)
close(yy)
#Do corrections ever matter?
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(filter(allTests,mismatch))
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
allTests %>%
#filter(Group == 'MDRight-toLang', contrastName == 'non-sent') %>%
#summarise(n(), sum(sig), reportTests(t,p))
filter(Group == 'RevLangRight-toMD', contrastName == 'non-sent', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'RevLangLeft-toMD', contrastName == 'non-sent', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'RevLangLeft-toMD', contrastName == 'non-sent', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
