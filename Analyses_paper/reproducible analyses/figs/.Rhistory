mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
#Little extra for ToM: Remove the VMPFC because it did not replicate the basic localizer finding.
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM') %>%
filter(ROIName !="VMPFC")
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('NewToMfROIsresCustomJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')%>%
filter(ROIName !="VMPFC")
allSigChange = rbind(allSigChange, myResults)
View(allSigChange)
#########
# TRANSFORMATIONS
#########
#First, in addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group','SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- allSigChange %>%
select(one_of('Group','ROIName', 'ROI','SubjectNumber', 'contrastName','sigChange'))
allSigChange <- rbind(allSigChange, avgSigChange)
#Drop the contrasts we're not interested in...
toGraph = allSigChange %>%
filter(contrastName %in% c('joke','lit','high','med','low'))
#Next, get the table that we'll be making the graphs from: for each region (including the average region), take all
#the individual signal changes and calculate a mean and a standard error
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI,toGraph$contrastName), mean)
names(mystats) = c('Group','ROIName', 'ROI','contrastName', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI,toGraph$contrastName), sterr)
names(myster) = c('Group','ROIName', 'ROI','contrastName', 'sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#########
# Graphs!
#########
#Now we can use the information stored in mystats to make pretty graphs! This could be done in excel too by printing mystats
#Change to figs output folder
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses/figs")
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats[mystats$contrastName == 'high',]$contNo <- 1
mystats[mystats$contrastName == 'med',]$contNo <- 2
mystats[mystats$contrastName == 'low',]$contNo <- 3
#mystats = arrange(mystats, ROI)
mystats = arrange(mystats, contNo)
#Add a new col grouping to separate out the localizer average
mystats$ROIGroup <- ""
mystats[mystats$ROIName == "LocalizerAverage",]$ROIGroup <- "across fROIs"
mystats = arrange(mystats, desc(ROIGroup))
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-jokes\n   "
mystats[mystats$contrastName == "high",]$contrastLabel <- "high\n  "
mystats[mystats$contrastName == "med",]$contrastLabel <- "med\n   "
mystats[mystats$contrastName == "low",]$contrastLabel <- "low\n  "
#Subsets & Ordering
RHLang = filter(mystats, Group == 'RHLang')
RHLang <- RHLang[order(RHLang$ROI),]
RHLang$PresOrder = c(13,14, 9,10, 7,8, 11,12, 3,4,5,6,1,2) #Reorder for standard presentation!
RHLang <- RHLang[order(RHLang$PresOrder),]
RHLang = arrange(RHLang, desc(ROIGroup))
LHLang = filter(mystats, Group == 'LHLang')
LHLang <- LHLang[order(LHLang$ROI),]
LHLang$PresOrder = c(13,14, 9,10, 7,8, 11,12, 3,4,5,6,1,2)
LHLang <- LHLang[order(LHLang$PresOrder),]
LHLang = arrange(LHLang, desc(ROIGroup))
LHLang
MDLeft = filter(mystats, Group == 'MDLeft')
MDLeft <- MDLeft[order(MDLeft$ROI),]
MDLeft
MDLeft
MDLeft = filter(mystats, Group == 'MDLeft')
MDLeft <- MDLeft[order(MDLeft$ROI),]
MDLeft = arrange(MDLeft, desc(ROIGroup))
MDLeft
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=se_down, ymax=se_up), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2, height=6)
}
makeBar(MDLeft)
MDRight = filter(mystats, Group == 'MDRight')
MDRight <- MDRight[order(MDRight$ROI),]
MDRight = arrange(MDRight, desc(ROIGroup))
ToM = filter(mystats, Group == 'ToM')
ToM <- ToM[order(ToM$ROI),]
ToM = arrange(ToM, desc(ROIGroup))
ToMCustom = filter(mystats, Group == 'ToMCustom')
ToMCustom <- arrange(ToMCustom, contNo)
ToMCustom <- ToMCustom[order(ToMCustom$ROI),]
ToMCustom = arrange(ToMCustom, desc(ROIGroup))
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=se_down, ymax=se_up), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2, height=6)
}
makeBar(LHLang)
makeBar(RHLang)
makeBar(MDLeft)
makeBar(MDRight)
makeBar(ToM, -0.5, 1)
makeBar(ToMCustom, -0.5, 1, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
makeBar(LHLang)
makeBar(RHLang)
makeBar(MDLeft)
makeBar(MDRight)
makeBar(ToM, -0.5, 1)
makeBar(ToMCustom, -0.5, 1, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
makeBar(LHLang)
makeBar(RHLang)
makeBar(MDLeft)
makeBar(MDRight)
makeBar(ToM, -0.5, 1)
makeBar(ToMCustom, -0.5, 1, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=se_down, ymax=se_up), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2.5, height=6.1)
}
makeBar(LHLang)
makeBar(RHLang)
makeBar(MDLeft)
makeBar(MDRight)
makeBar(ToM, -0.5, 1)
makeBar(ToMCustom, -0.5, 1, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=se_down, ymax=se_up), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2.3, height=6.1)
}
makeBar(LHLang)
makeBar(RHLang)
makeBar(MDLeft)
makeBar(MDRight)
makeBar(ToM, -0.5, 1)
makeBar(ToMCustom, -0.5, 1, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=se_down, ymax=se_up), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2.1, height=6.1)
}
makeBar(LHLang)
makeBar(RHLang)
makeBar(MDLeft)
makeBar(MDRight)
makeBar(ToM, -0.5, 1)
makeBar(ToMCustom, -0.5, 1, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=se_down, ymax=se_up), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2.2, height=6.1)
}
makeBar(LHLang)
makeBar(RHLang)
makeBar(MDLeft)
makeBar(MDRight)
makeBar(ToM, -0.5, 1)
makeBar(ToMCustom, -0.5, 1, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
#Relating behavioral and contrast data by subjects!
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(lme4)
library(ggplot2)
#(set your own wd first)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
mywd <- getwd()
setwd("indsubjs_behavioral_data")
myfi <- list.files(pattern='*data\\.csv')
mydata <- data.frame(NULL)
for(f in myfi) {
tmp <- read.csv(f, header=T)
tmp$filename <- f
mydata <- rbind(mydata, tmp)
}
#Subjs 6 onward have oddly formatted TR info at the top of files, remove it
mydata <- mydata[grep("KAN",mydata$subj),]
#Drop nonresponding trials
mydata$RT <- as.numeric(as.character(mydata$RT))
mydata <- mydata[!is.na(mydata$RT),]
#Relable subject data from filenames!
mydata <- mydata %>%
mutate(newSubjectName = substr(filename,1,15))
####
# Ratings
####
#Get average ratings per category per participant
mydata$response <- as.numeric(as.character(mydata$response))
avgResponse <- mydata %>%
group_by(newSubjectName, category) %>%
summarise(meanResponse = mean(response))
####
# Now go to the contrast files and get the jokes-lit average activation per subj.
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
myfMRIResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM') %>%
filter(contrastName == 'joke-lit') %>%
group_by(SubjectNumber)%>%
summarize(meanSigChange = mean(sigChange))
myRatingResults <- mydata %>%
mutate(SubjectNumber = as.numeric(as.factor(newSubjectName))) %>%
group_by(SubjectNumber, newSubjectName, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
#Merge the datasets!
bb <- merge(myRatingResults, myfMRIResults)
## REPORT STATS
cor(bb$meanResponseChange, bb$meanSigChange)
## MAKE PRETTY GRAPH
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses/figs")
coef(lm(meanResponseChange ~ meanSigChange, data = bb))
ggplot(data=bb, aes(y=meanSigChange, x=meanResponseChange)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(limits = c(-0.25, 0.50), breaks = seq(-0.25, 0.50, 0.25)) +
scale_x_continuous(limits = c(0, 2), breaks = seq(0, 2, 0.5)) +
xlab('average response (Jokes - Non-jokes)') +
ylab('average activation (Jokes - Non-jokes)') +
theme_bw() +
ggsave(filename="behav_activation.jpg", width=3, height=3)
#Relating behavioral and contrast data by subjects!
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(lme4)
library(ggplot2)
#(set your own wd first)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
mywd <- getwd()
setwd("indsubjs_behavioral_data")
myfi <- list.files(pattern='*data\\.csv')
mydata <- data.frame(NULL)
for(f in myfi) {
tmp <- read.csv(f, header=T)
tmp$filename <- f
mydata <- rbind(mydata, tmp)
}
#Subjs 6 onward have oddly formatted TR info at the top of files, remove it
mydata <- mydata[grep("KAN",mydata$subj),]
#Drop nonresponding trials
mydata$RT <- as.numeric(as.character(mydata$RT))
mydata <- mydata[!is.na(mydata$RT),]
#Relable subject data from filenames!
mydata <- mydata %>%
mutate(newSubjectName = substr(filename,1,15))
####
# Ratings
####
#Get average ratings per category per participant
mydata$response <- as.numeric(as.character(mydata$response))
avgResponse <- mydata %>%
group_by(newSubjectName, category) %>%
summarise(meanResponse = mean(response))
####
# Now go to the contrast files and get the jokes-lit average activation per subj.
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
myfMRIResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM') %>%
filter(contrastName == 'joke-lit') %>%
group_by(SubjectNumber)%>%
summarize(meanSigChange = mean(sigChange))
myRatingResults <- mydata %>%
mutate(SubjectNumber = as.numeric(as.factor(newSubjectName))) %>%
group_by(SubjectNumber, newSubjectName, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
#Merge the datasets!
bb <- merge(myRatingResults, myfMRIResults)
## REPORT STATS
cor(bb$meanResponseChange, bb$meanSigChange)
## MAKE PRETTY GRAPH
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses/figs")
coef(lm(meanResponseChange ~ meanSigChange, data = bb))
ggplot(data=bb, aes(y=meanSigChange, x=meanResponseChange)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(limits = c(-0.25, 0.50), breaks = seq(-0.25, 0.50, 0.25)) +
scale_x_continuous(limits = c(0, 2), breaks = seq(0, 2, 0.5)) +
xlab('avg. response (Jokes - Non-jokes)') +
ylab('avg. % sig. change (Jokes - Non-jokes)') +
theme_bw() +
ggsave(filename="behav_activation.jpg", width=3, height=3)
#Relating behavioral and contrast data by subjects!
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
library(lme4)
library(ggplot2)
#(set your own wd first)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
mywd <- getwd()
setwd("indsubjs_behavioral_data")
myfi <- list.files(pattern='*data\\.csv')
mydata <- data.frame(NULL)
for(f in myfi) {
tmp <- read.csv(f, header=T)
tmp$filename <- f
mydata <- rbind(mydata, tmp)
}
#Subjs 6 onward have oddly formatted TR info at the top of files, remove it
mydata <- mydata[grep("KAN",mydata$subj),]
#Drop nonresponding trials
mydata$RT <- as.numeric(as.character(mydata$RT))
mydata <- mydata[!is.na(mydata$RT),]
#Relable subject data from filenames!
mydata <- mydata %>%
mutate(newSubjectName = substr(filename,1,15))
####
# Ratings
####
#Get average ratings per category per participant
mydata$response <- as.numeric(as.character(mydata$response))
avgResponse <- mydata %>%
group_by(newSubjectName, category) %>%
summarise(meanResponse = mean(response))
####
# Now go to the contrast files and get the jokes-lit average activation per subj.
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
myfMRIResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM') %>%
filter(contrastName == 'joke-lit') %>%
group_by(SubjectNumber)%>%
summarize(meanSigChange = mean(sigChange))
myRatingResults <- mydata %>%
mutate(SubjectNumber = as.numeric(as.factor(newSubjectName))) %>%
group_by(SubjectNumber, newSubjectName, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
#Merge the datasets!
bb <- merge(myRatingResults, myfMRIResults)
## REPORT STATS
cor(bb$meanResponseChange, bb$meanSigChange)
## MAKE PRETTY GRAPH
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses/figs")
coef(lm(meanResponseChange ~ meanSigChange, data = bb))
ggplot(data=bb, aes(y=meanSigChange, x=meanResponseChange)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(limits = c(-0.25, 0.50), breaks = seq(-0.25, 0.50, 0.25)) +
scale_x_continuous(limits = c(0, 2), breaks = seq(0, 2, 0.5)) +
xlab('average rating response \n(Jokes - Non-jokes)') +
ylab('avg. % signal change \n(Jokes - Non-jokes)') +
theme_bw() +
ggsave(filename="behav_activation.jpg", width=3, height=3)
