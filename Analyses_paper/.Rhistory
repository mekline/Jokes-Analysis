summarise(reportTests(t,p)) #Convention: when all significant, report the largest p
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
###
#RESP LOCALIZER
allTests %>%
filter(Group == 'LHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Convention: when all significant, report the largest p
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #found a surprise nonsig!
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #found a surprise nonsig!
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
View(filter(allTests, Group == 'RHLang-toLang', contrastName == 'sent-non', !sig))
allTests %>%
filter(Group == 'ToM-toToM', contrastName == 'bel-pho', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
View(filter(allTests, Group == 'ToM-toToM', contrastName == 'bel-pho', !sig))
#RESP LOCALIZER
allTests %>%
filter(Group == 'LHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Convention: when all significant, report the largest p
#allTests %>%
#  filter(Group == 'RHLang-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), reportTests(t,p)) #found a surprise nonsig!
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
View(filter(allTests, Group == 'RHLang-toLang', contrastName == 'sent-non', !sig))
###TO ADD! MD localizer check
#allTests %>%
#  filter(Group == 'MDRight-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), min(t), max(p)) #found a surprise nonsig!
#allTests %>%
#  filter(Group == 'MDLeft-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), min(t), max(p)) #found a surprise nonsig!
#allTests %>%
#  filter(Group == 'ToM-toToM', contrastName == 'bel-pho') %>%
#  summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'ToM-toToM', contrastName == 'bel-pho', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
View(filter(allTests, Group == 'ToM-toToM', contrastName == 'bel-pho', !sig))
filter(allTests, Group == 'ToM-toToM', contrastName == 'bel-pho', !sig)
allTests %>%
filter(Group == 'RHLang', contrastName == 'joke', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang', contrastName == 'joke', !sig)
allTests %>%
filter(Group == 'RHLang', contrastName == 'joke-lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', contrastName == 'joke') %>%
summarise(n(), sum(sig), min(t), max(p))
allTests %>%
filter(Group == 'LHLang', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p)) #ONLY ONE of the ROIs significant
filter(allTests, Group == 'LHLang', contrastName == 'joke-lit', sig)
allTests %>%
filter(Group == 'MDRight', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDRight', contrastName == 'joke', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(Group == 'MDRight', contrastName == 'joke', !sig)
filter(allTests, Group == 'MDRight', contrastName == 'joke', !sig)
allTests %>%
filter(Group == 'MDRight', contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'joke', !sig)
filter(allTests, Group == 'MDRight', contrastName == 'lit', !sig)
filter(allTests, Group == 'MDRight', contrastName == 'joke-lit', !sig)
filter(allTests, Group == 'MDRight', contrastName == 'joke-lit', sig)
filter(allTests, Group == 'MDLeft', contrastName == 'joke-lit', sig)
allTests %>%
filter(Group == 'MDRight', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'joke-lit', sig)
allTests %>%
filter(Group == 'MDLeft', contrastName == 'joke', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'joke', !sig)
filter(allTests, Group == 'MDLeft', contrastName == 'joke', !sig)
filter(allTests, Group == 'MDLeft', contrastName == 'joke')
allTests %>%
filter(Group == 'MDLeft', contrastName == 'lit',sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDLeft', contrastName == 'lit', !sig)
allTests %>%
filter(Group == 'MDLeft', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDLeft', contrastName == 'joke-lit', sig)
allTests %>%
filter(Group == 'ToM', contrastName == 'joke', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'ToM', contrastName == 'lit', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'ToM', contrastName == 'joke-lit', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'ToM', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'ToM', contrastName == 'joke',!sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM', contrastName == 'joke', sig)
allTests %>%
filter(Group == 'ToM', contrastName == 'lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM', contrastName == 'lit', sig)
allTests %>%
filter(Group == 'ToM', contrastName == 'joke-lit', !sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM', contrastName == 'joke-lit', sig)
#This takes the individual-subject contrast values and runs some nifty lmer models.  First #many
#lines are reading in the contrasts as in localizer_t_tests, fun stuff starts on line 105
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
# myResults = read.csv('MDfROIsrespLang.csv')%>%
#   mutate(ROIName = MDROI.Names[ROI]) %>%
#   mutate(contrastName = lang.contrasts[Contrast])%>%
#   mutate(Group = 'MDall-toLang')
# allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM
myResults = read.csv('NewToMfROIsresCustomJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#View(allSigChange)
View(allSigChange)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here
#so mk can track how those are done/feed into other analyses)
rm(list=ls(all=TRUE))
library(tidyr)
library(dplyr)
#Set wd!
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#######
# Read in all contrast values
#######
# Add in the contrast and ROI names so it's not just numbers!!!!!
RHLangROI.Names = c('RPostTemp', 'RAntTemp', 'RAngG', 'RIFG',      'RMFG',     'RIFGorb');
LangROI.Names = c('LPostTemp', 'LAntTemp', 'LAngG', 'LIFG',      'LMFG',     'LIFGorb');
MDROI.Names = c('LIFGop',  'RIFGop', 'LMFG',    'RMFG',    'LMFGorb',
'RMFGorb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LParInf', 'RParInf', 'LParSup',
'RParSup', 'LACC',   'RACC');
ToMROI.Names = c('DMPFC', 'LTPJ',  'MMPFC', 'PC',
'RTPJ',  'VMPFC', 'RSTS');
lang.contrasts = c('sent','non','sent-non')
md.contrasts = c()
tom.contrasts = c('bel','pho','bel-pho')
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other')
###RESP LOCALIZER
myResults = read.csv('RHLangfROIsrespLangLoc.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'RHLang-toLang')
allSigChange = myResults
myResults = read.csv('LangfROIsrespLangLoc.csv')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = lang.contrasts[Contrast])%>%
mutate(Group = 'LHLang-toLang')
allSigChange = rbind(allSigChange, myResults)
##TO ADD: MD to Lang localizer measure (Non should > Sent)
# myResults = read.csv('MDfROIsrespLang.csv')%>%
#   mutate(ROIName = MDROI.Names[ROI]) %>%
#   mutate(contrastName = lang.contrasts[Contrast])%>%
#   mutate(Group = 'MDall-toLang')
# allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft-toLang'
#allSigChange[(allSigChange$Group == 'MDall-toLang') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight-toLang'
myResults = read.csv('NewToMfROIsrespToMLoc.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = tom.contrasts[Contrast])%>%
mutate(Group = 'ToM-toToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES
myResults = read.csv('RHLangfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'RHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('LangfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = LangROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast])%>%
mutate(Group = 'LHLang')
allSigChange = rbind(allSigChange, myResults)
myResults = read.csv('MDfROIsrespNonlitJokes.csv') %>%
mutate(ROIName = MDROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'MDAll')
allSigChange = rbind(allSigChange, myResults)
#Little extra thing here, rename MD to split by L and R hemisphere!
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 1),]$Group = 'MDLeft'
allSigChange[(allSigChange$Group == 'MDAll') & (allSigChange$ROI %%2 == 0),]$Group = 'MDRight'
myResults = read.csv('NewToMfROIsrespNonlitJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = rbind(allSigChange, myResults)
###RESP JOKES-CUSTOM
myResults = read.csv('NewToMfROIsresCustomJokes.csv')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = custom.contrasts[Contrast])%>%
mutate(Group = 'ToMCustom')
allSigChange = rbind(allSigChange, myResults)
#View(allSigChange)
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, ROI, Contrast, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, Contrast)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
#View(allTests)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/reproducible analyses")
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
########
# Report those T tests like we want for the paper
########
#Do corrections ever matter?
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(filter(allTests,mismatch))
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
allTests %>%
filter(Group == 'LHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Convention: when all significant, report the largest p
allTests %>%
filter(Group == 'LHLang-toLang', contrastName == 'sent-non') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Convention: when all significant, report the largest p
#allTests %>%
#  filter(Group == 'RHLang-toLang', contrastName == 'sent-non') %>%
#  summarise(n(), sum(sig), reportTests(t,p)) #found a surprise nonsig!
allTests %>%
filter(Group == 'RHLang-toLang', contrastName == 'sent-non', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang-toLang', contrastName == 'sent-non', !sig)
library(lme4)
help(glmer)
help(lmer)
names(allSigChange)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", contrastName == "sent" || contrastName == "non")
View(LHLangtoLang)
LHLangtoLang <- filter(allSigChange, contrastName == "sent" || contrastName == "non")
View(LHLangtoLang)
LHLangtoLang <- filter(allSigChange, contrast < 3)
LHLangtoLang <- filter(allSigChange, Contrast < 3)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", Contrast < 3)
View(LHLangtoLang)
names(allSigChange)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", Contrast < 3)
m1 <- glmer(sigChange ~ contrastName + (1|ROI) + (1|SubjectNumber), data = LHLangtoLang, family = "gaussian")
m1 <- lmer(sigChange ~ contrastName + (1|ROI) + (1|SubjectNumber), data = LHLangtoLang)
summary(m1)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", Contrast < 3)
m1 <- lmer(sigChange ~ contrastName + (1|ROI) + (1|SubjectNumber), data = LHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (1|ROI) + (1|SubjectNumber), data = LHLangtoLang)
anova(m1,m0)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", Contrast == 'sent' | Contrast == 'non')
View(LHLangtoLang)
LHLangtoLang <- filter(allSigChange, Group == "LHLang-toLang", contrastName == 'sent' | contrastName == 'non')
View(LHLangtoLang)
RHLangtoLang <- filter(allSigChange, Group == "RHLang-toLang", contrastName == 'sent' | contrastName == 'non')
m1 <- lmer(sigChange ~ contrastName + (1|ROI) + (1|SubjectNumber), data = RHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (1|ROI) + (1|SubjectNumber), data = RHLangtoLang)
anova(m1,m0)
ToMtoToM <- filter(allSigChange, Group == "ToM-toToM", contrastName == 'bel' | contrastName == 'pho')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = LHLangtoLang)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = LHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = LHLangtoLang)
anova(m1,m0)
ToMtoToM <- filter(allSigChange, Group == "ToM-toToM", contrastName == 'bel' | contrastName == 'pho')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = ToMtoToM)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = ToMtoToM)
anova(m1,m0)
RHLang <- filter(allSigChange, Group == "RHLang", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = RHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = RHLangtoLang)
anova(m1,m0)
RHLang <- filter(allSigChange, Group == "RHLang", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = RHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = RHLang)
anova(m1,m0)
LHLang <- filter(allSigChange, Group == "LHLang", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = LHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = LHLang)
anova(m1,m0)
MDRight <- filter(allSigChange, Group == "MDRight", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = MDRight)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = MDRight)
anova(m1,m0)
MDLeft <- filter(allSigChange, Group == "MDLeft", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = MDLeft)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = MDLeft)
anova(m1,m0)
ToM <- filter(allSigChange, Group == "ToM", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROI) + (contrastName|SubjectNumber), data = ToM)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROI) + (contrastName|SubjectNumber), data = ToM)
anova(m1,m0)
ToM_MDRight <- filter(allSigChange, Group == "ToM" | Group = "MDRight", contrastName == 'joke' | contrastName == 'lit')
ToM_MDRight <- filter(allSigChange, Group == "ToM" | Group == "MDRight", contrastName == 'joke' | contrastName == 'lit')
View(ToM_MDRight)
m1 <- lmer(sigChange ~ contrastName*Group + (contrastName*Group|ROI) + (contrastName*Group|SubjectNumber), data = MDLeft)
#Plan: Within each system (localizers, and jokes), test for condition differences
RHLangtoLang <- filter(allSigChange, Group == "RHLang-toLang", contrastName == 'sent' | contrastName == 'non')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
anova(m1,m0)
ToM_MDRight <- filter(allSigChange, Group == "ToM" | Group == "MDRight", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Group + (contrastName*Group|ROIName) + (contrastName*Group|SubjectNumber), data = MDLeft)
m1 <- lmer(sigChange ~ contrastName*Group + (contrastName|ROIName) + (contrastName*Group|SubjectNumber), data = MDLeft)
m1 <- lmer(sigChange ~ contrastName*Group + (contrastName|ROIName) + (contrastName*Group|SubjectNumber), data = ToM_MDRight)
m0 <- lmer(sigChange ~ contrastName+Group + (contrastName|ROIName) + (contrastName*Group|SubjectNumber), data = ToM_MDRight)
anova(m1,m0)
ToM_MDRight_cont <- filter(allSigChange, Group == "ToM" | Group == "MDRight", contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
m1 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
anova(m1,m0)
unique(allSigChange(contrastName))
unique(allSigChanges(contrastName))
unique(allSigChange$contrastName)
ToMCustom <- <- filter(allSigChange, Group == "ToMCustom", contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
type(ToMCustom$contrastName)
ToMCustom$contrastName
ToMCustom <- filter(allSigChange, Group == "ToMCustom", contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
ToMCustom$contrastName
is.ordered(ToMCustom$contrastName)
head(ToMCustom)
is.ordered(ToMCustom$Contrast)
help(as.factor)
ToMCustom$contrastName <- as.factor(ToMCustom$contrastName, as.ordered = TRUE)
is.ordered(ToMCustom$contrastName)
ToMCustom$contrastName <- as.factor(ToMCustom$contrastName)
head(ToMCustom)
is.factor(ToMCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMCustom)
anova(m1,m0)
ToM_RHLang_cont <- filter(allSigChange, Group == "ToM" | Group == "RHLang", contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_RHLang_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_RHLang_cont)
anova(m1,m0)
ToM_MDLeft_cont <- filter(allSigChange, Group == "ToM" | Group == "MDLeft", contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDLeft_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDLeft_cont)
anova(m1,m0)
ToM_LHLang_cont <- filter(allSigChange, Group == "ToM" | Group == "LHLang", contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_LHLang_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_LHLang_cont)
anova(m1,m0)
LHLang <- filter(allSigChange, Group == "LHLang", contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLang)
anova(m1,m0)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/contrasts")
#load_spmss_results
#
#This file loads the output of one of the results.csv files produced by the toolbox into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, sorts out its structure
#and reorganizes the data into proper longform. Take your analysis from there or save the result in a csv.
####
#Stuff to change!
myResultsFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Toolbox results - supplemental/MDfROIsrespRevLangLoc_20160926_results'
myOutputFolder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/'
myFilename = 'MDfROIsrespRevLangLoc_20160926.csv'
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
