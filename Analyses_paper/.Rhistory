df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
library(dplyr)
install.packages("dplyr")
library(plyr)
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
library(lsr)
foo <- c(3,12,10,5)
dim(foo) <-c(2,2)
foo
foo <- c(3,12,7,10,5,6)
dim(foo) <-c(3,2)
foo
fisher.test(foo)
foo <- c(10,20,1,20)
dim(foo) <- c(2,2)
foo
chisq.test(foo)
fisher.test(foo)
installed.packages()
binomial.test([1 1 0 0 0 ], 0.5)
binomial.test(c(1 1 0 0 0 ), 0.5)
foo = c(1,2,2,2)
foo = c(0,1,1,1,1)
binomial.test(foo, 0.5)
binom.test(foo, 0.5)
binom.test(1,20,0)
binom.test(1,2000,0)
binom.test(1,2000,0.1)
binom.test(1,2000,0.5)
binom.test(1000,2000,0.5)
binom.test(1,2000,0, alternative="greater")
help(csv)
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper")
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Main/LangfROIsrespNonlitJokes_20160124_results")
ls
listfiles
list
myfile  = read.csv(spm_ss_mROI_data.csv)
getpwd
getwd
getwd()
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',')
myfile  = read('spm_ss_mROI_data.csv')
myfile  = read.table('spm_ss_mROI_data.csv')
myfile
myfile  = read.table('spm_ss_mROI_data.csv', sep=',')
myfile
myfile(1)
myfile[1]
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/")
myfile  = read.table('spm_ss_mROI_data.csv', sep=',')
myfile  = read.table('spm_ss_mROI_data.csv')
myfile
myfile  = read.csv('spm_ss_mROI_data.csv')
myfile
names(myfile)
library(dplyr)
glimpse(myfile)
library(tidyr)
foo <- myfile %>%
select("contains","Subject.")
foo <- myfile %>%
select(contains,"Subject.")
foo <- myfile %>%
select(contains("Subject."))
foo
foo <- myfile %>%
select(starts_with("Subject.")) %>%
1
foo <- myfile %>%
select(starts_with("Subject."))
foo
foo <- myfile %>%
select(starts_with("Subject.")) %>%
separate("Subject.1.1.", c("foo","subno","contrast")
)
names(myfile)
gather(myfile, "subno", "n", 5:)
gather(myfile, "subno", "n", 5:10)
foo = gather(myfile, "subno", "n", 5:10)
glipse(foo)
glimpse(foo)
foo$subno
foo = gather(myfile, "subno", "n", Subject.1.1.:)
ncol(myfile)
foo = gather(myfile, "subno", "n", Subject.1.1.:40)
foo
foo <- myfile %>%
gather("Subject+Cont", "%sigChange", Subject.1.1.:ncol(myfile))
#Add column for subject name
foo = gather(myfile, "subno", "n", Subject.1.1.:40)
foo
names(foo)
goo = "Subject.1.1."
split(goo)
help(split)
library(stringr)
str_split(goo, ".")
goo
str_split(goo, "\.")
str_split(goo, "/.")
str_split(fixed(goo), ".")
str_split(goo, "1")
str_split(goo, "\\.")
str_split(goo, "\\.")[2]
str_split(goo, "\\.")(2)
str_split(goo, "\\."){2}
foo = str_split(goo, "\\.")
foo
foo(1)
unlist(foo[1])
unlist(foo[[1])
unlist(foo[[1]])
unlist(foo[[1]][1])
unlist(foo[1][1])
extract_val <- function(mystring, mynum){
myval = unlist(foo[[1]][mynum])
return(myval)
}
extract_val("Subject.1.1.", 2)
foo = "1"
foo
foo <- myfile %>%
gather("Subject_and_Cont", "%sigChange", Subject.1.1.:ncol(myfile)) %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 3)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 2)
)
names(foo)
foo$SubjectNumber
extract_val <- function(mystring, mynum){
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Find the last column
foo <- myfile %>%
gather("Subject_and_Cont", "%sigChange", Subject.1.1.:ncol(myfile)) %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 3)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 2))
foo$SubjectNumber
foo <- myfile %>%
gather("Subject_and_Cont", "%sigChange", Subject.1.1.:ncol(myfile)) %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 1)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 1))
foo$SubjectNumber
foo <- myfile %>%
gather("Subject_and_Cont", "%sigChange", Subject.1.1.:ncol(myfile)) %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 1))
foo$SubjectNumber
foo$Subject_and_Cont
names(foo)
mutate(mydata, new = average(%sigChange, 2))
#Find the last column
foo <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 1))
mutate(foo, newone = average(sigChange, 2))
mean(1, 2)
mean(1, 4)
mean(c(1, 4))
mutate(foo, newone = mean(c(sigChange, 2)))
mutate(foo, newone = mean(c(sigChange, sigChange)))
mutate(foo, newone = mean(sigChange))
mean(foo$sigChange)
foo <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 1))
foo
foo$SubjectNumber
foo$Contrast
names(foo)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont)
glimpse(myfile)
myfile[,c("SubjectNumber","Contrast")]
myfile[,c("SubjectNumber","Contrast", "ROI.")]
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',')
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer. Also could add that as an optional function arg.
extract_val <- function(mystring, mynum){
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Find the last column
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
names(myfile)
pwd
getwd
getwd()
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Main/LangfROIsrespNonlitJokes_20160124_results"
)
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',')
count.fields(file = 'spm_ss_mROI_data.csv', sep=",")
readlines('spm_ss_mROI_data.csv')
read.lines('spm_ss_mROI_data.csv')
read('spm_ss_mROI_data.csv')
read.table('spm_ss_mROI_data.csv')
read.table('spm_ss_mROI_data.csv', comment = NULL)
read.table('spm_ss_mROI_data.csv', comment = NA)
read.table('spm_ss_mROI_data.csv', comment = "^")
read.table('spm_ss_mROI_data.csv')
read.table('spm_ss_mROI_data.csv')
read.table('spm_ss_mROI_data.csv', comment.char="")
?read.table
read.table('spm_ss_mROI_data.csv', skip=2)
count.fields('spm_ss_mROI_data.csv', skip=2)
read.csv('spm_ss_mROI_data.csv', skip=2)
foo <- read.csv('spm_ss_mROI_data.csv', skip=2)
names(foo)
foo <- read.csv('spm_ss_mROI_data.csv', skip=1)
names(foo)
pwd
getwd()
foo$Subject.2.1.
foo$Subject.12.1.
foo <- read.csv('spm_ss_mROI_data.csv', skip=1)
ncol(foo)
foo <- foo[complete.cases(foo[,40]),]
foo
#This file loads the output of one of the results.csv files produced by the toolbox into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, detects useful info like # of contrasts,
#and reorganizes the data into proper longform.
library(dplyr)
library(tidyr)
library(stringr)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Find the last column
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
myfile
glimpse(myfile)
#This file loads the output of one of the results.csv files produced by the toolbox into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, detects useful info like # of contrasts,
#and reorganizes the data into proper longform.
library(dplyr)
library(tidyr)
library(stringr)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
myfile[] <- lapply(myfile, as.character)
glimpse(myfile)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
View(myfile)
getwd
getwd()
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/")
zz <- file("my-nicely-named-data.csv", "w")
write.csv(myfile, zz)
zz <- file("my-nicely-named-data.csv", "w")
write.csv(myfile, zz, row.names=FALSE)
#load_spmss_results
#
#This file loads the output of one of the results.csv files produced by the toolbox into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, sorts out its structure
#and reorganizes the data into proper longform.
library(dplyr)
library(tidyr)
library(stringr)
#set your directory with setwd() here!!!!!!!!
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/Main/LangfROIsrespNonlitJokes_20160124_results")
#load_spmss_results
#
#This file loads the output of one of the results.csv files produced by the toolbox into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, sorts out its structure
#and reorganizes the data into proper longform.
library(dplyr)
library(tidyr)
library(stringr)
#set your directory with setwd() here!!!!!!!!
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
lastsub
View(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
View(myfile)
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
View(myfile)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
View(myfile)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/")
zz <- file("my-nicely-named-data.csv", "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
